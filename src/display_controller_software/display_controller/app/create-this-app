#!/bin/bash
#
# This script creates the display controller application in this directory.

BSP_DIR=../bsp
QUARTUS_PROJECT_DIR=../../../
SOPCINFO_FILE="nios2_linux_3c120_125mhz_sys_sopc.sopcinfo"
NIOS2_APP_GEN_ARGS="\
--elf-name display_controller.elf \
--set APP_CFLAGS_OPTIMIZATION -Os \
--set CREATE_OBJDUMP 0 \
--set OBJDUMP_INCLUDE_SOURCE 1 \
--set OBJS linux_cpu_config.o \
--set LINKER_SCRIPT $BSP_DIR/my_linker.x \
--src-files main.c seven_seg.c chr_display.c gfx_character_rom.c gfx_display.c \
"


# First, check to see if $SOPC_KIT_NIOS2 environmental variable is set.
# This variable is required for the command line tools to execute correctly.
if [ -z $SOPC_KIT_NIOS2 ]
then
    echo Required \$SOPC_KIT_NIOS2 Environmental Variable is not set!
    exit 1
fi


# Also make sure that the APP has not been created already.  Check for
# existence of Makefile in the app directory
if [ -f ./Makefile ]
then
    echo Application has already been created!  Delete Makefile if you want to create a new application makefile
    exit 1
fi

# Parse the command line options
# Don't run make if create-this-app script is called with --no-make arg
SKIP_MAKE=
BSP_OPTIONS=
while [ $# -gt 0 ]
do
  case "$1" in
      --no-make)
          SKIP_MAKE=1
          BSP_OPTIONS="$BSP_OPTIONS --no-make"
          ;;
      *)
          BSP_OPTIONS="$BSP_OPTIONS $1"
          ;;
  esac
  shift
done

# Now we also need to extract the sources for this application to the
# local directory.
echo Extracting source files, but not overwriting existing files...
tar -kxf sources.tar 2> /dev/null

# Now let's extract the Linux CPU configuration data and create a string header
./extract_linux_cpu_header.sh "$QUARTUS_PROJECT_DIR$SOPCINFO_FILE"
if [ $? -ne 0 ] ; then
    echo "ERROR: while extracting linux cpu configuration data..."
    exit 1
fi

# We are selecting hal_reduced_footprint bsp because it supports this application.
# Check to see if the hal_reduced_footprint has already been generated by checking for 
# existence of the public.mk file.  If not, we need to run
# create-this-bsp file to generate the bsp.
if [ ! -f $BSP_DIR/public.mk ]; then
    # Since BSP doesn't exist, create the BSP
    # Pass any command line arguments passed to this script to the BSP.
    pushd $BSP_DIR >> /dev/null
    ./create-this-bsp $BSP_OPTIONS || {
        echo "create-this-bsp failed"
        exit 1
    }
    popd >> /dev/null
fi

# Now let's create our linker script file
quartus_sh -t create_my_linker_script.tcl $BSP_DIR/linker.x $BSP_DIR/my_linker.x

cmd="nios2-app-generate-makefile --bsp-dir $BSP_DIR --set QUARTUS_PROJECT_DIR=$QUARTUS_PROJECT_DIR $NIOS2_APP_GEN_ARGS"

echo "create-this-app: Running \"$cmd\""
$cmd || {
    echo "nios2-app-generate-makefile failed"
    exit 1
}

if [ -z "$SKIP_MAKE" ]; then
    cmd="make"

    echo "create-this-app: Running \"$cmd\""
    $cmd || {
        echo "make failed"
        exit 1
    }

    echo
    echo "To download and run the application:"
    echo "    1. Make sure the board is connected to the system."
    echo "    2. Run 'nios2-configure-sof <SOF_FILE_PATH>' to configure the FPGA with the hardware design."
    echo "    3. If you have a stdio device, run 'nios2-terminal' in a different shell."
    echo "    4. Run 'make download-elf' from the application directory."
    echo
    echo "To debug the application:"
    echo "    Import the project into Nios II IDE.  Refer to Nios II IDE Documentation for more information."
    echo
    echo -e ""
fi


exit 0
